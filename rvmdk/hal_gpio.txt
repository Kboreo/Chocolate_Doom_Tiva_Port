; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\rvmdk\hal_gpio.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\hal_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\.. -I.\driverlib -I.\src -I.\inc -I.\RTE\_project -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DTM4C123GH6PM -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RB1 --omf_browse=.\rvmdk\hal_gpio.crf src\HAL_GPIO.c]
                          THUMB

                          AREA ||i.GpioSetup||, CODE, READONLY, ALIGN=2

                  GpioSetup PROC
;;;10     	
;;;11     void GpioSetup()		//sets up GPIO
000000  b510              PUSH     {r4,lr}
;;;12     {
;;;13     	
;;;14     	//Port F Setup
;;;15     	
;;;16     	// On Board RGB LED Pins
;;;17     	
;;;18     	// Enable the GPIO pin for the LED (PF3).  Set the direction as output, and
;;;19       // enable the GPIO pin for digital function.
;;;20     	
;;;21     	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3);
000002  2108              MOVS     r1,#8
000004  4822              LDR      r0,|L1.144|
000006  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;22     	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_2);
00000a  2104              MOVS     r1,#4
00000c  4820              LDR      r0,|L1.144|
00000e  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;23     	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1);
000012  2102              MOVS     r1,#2
000014  481e              LDR      r0,|L1.144|
000016  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;24     	
;;;25     	
;;;26     	// On Board Momentary Switches
;;;27     	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE,GPIO_PIN_0);
00001a  2101              MOVS     r1,#1
00001c  481c              LDR      r0,|L1.144|
00001e  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;28     	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE,GPIO_PIN_4);
000022  2110              MOVS     r1,#0x10
000024  481a              LDR      r0,|L1.144|
000026  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;29     	
;;;30     	//these two switchs need an internal pull up on pins
;;;31     	GPIOPadConfigSet(GPIO_PORTF_BASE,GPIO_PIN_0|GPIO_PIN_4,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);
00002a  230a              MOVS     r3,#0xa
00002c  2201              MOVS     r2,#1
00002e  2111              MOVS     r1,#0x11
000030  4817              LDR      r0,|L1.144|
000032  f7fffffe          BL       GPIOPadConfigSet
;;;32     	
;;;33     	//Port D Setup
;;;34     	
;;;35     	// Off Board Momentary Switches
;;;36     	GPIOPinTypeGPIOInput(GPIO_PORTD_BASE,GPIO_PIN_6);
000036  2140              MOVS     r1,#0x40
000038  4816              LDR      r0,|L1.148|
00003a  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;37     	GPIOPinTypeGPIOInput(GPIO_PORTD_BASE,GPIO_PIN_7);	
00003e  2180              MOVS     r1,#0x80
000040  4814              LDR      r0,|L1.148|
000042  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;38     	
;;;39     	//use internal pull ups for other switches as well. 
;;;40     	GPIOPadConfigSet(GPIO_PORTD_BASE,GPIO_PIN_6|GPIO_PIN_7,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);
000046  230a              MOVS     r3,#0xa
000048  2201              MOVS     r2,#1
00004a  21c0              MOVS     r1,#0xc0
00004c  4811              LDR      r0,|L1.148|
00004e  f7fffffe          BL       GPIOPadConfigSet
;;;41     	
;;;42     	
;;;43     	//Port C Setup
;;;44     	
;;;45     	// Off Board Momentary Switches
;;;46     	GPIOPinTypeGPIOInput(GPIO_PORTC_BASE,GPIO_PIN_7);
000052  2180              MOVS     r1,#0x80
000054  4810              LDR      r0,|L1.152|
000056  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;47     		
;;;48     	//use internal pull ups for other switches as well. 
;;;49     	GPIOPadConfigSet(GPIO_PORTC_BASE,GPIO_PIN_7,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD_WPU);	
00005a  230a              MOVS     r3,#0xa
00005c  2201              MOVS     r2,#1
00005e  2180              MOVS     r1,#0x80
000060  480d              LDR      r0,|L1.152|
000062  f7fffffe          BL       GPIOPadConfigSet
;;;50     	
;;;51     	//Port B Setup
;;;52     	GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0);
000066  2133              MOVS     r1,#0x33
000068  480c              LDR      r0,|L1.156|
00006a  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;53     	GPIOPadConfigSet(GPIO_PORTB_BASE,GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD);
00006e  2308              MOVS     r3,#8
000070  2201              MOVS     r2,#1
000072  2133              MOVS     r1,#0x33
000074  4809              LDR      r0,|L1.156|
000076  f7fffffe          BL       GPIOPadConfigSet
;;;54     
;;;55     	//Port E Setup
;;;56     	GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE, GPIO_PIN_5|GPIO_PIN_4);
00007a  2130              MOVS     r1,#0x30
00007c  4808              LDR      r0,|L1.160|
00007e  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;57     	GPIOPadConfigSet(GPIO_PORTE_BASE,GPIO_PIN_5|GPIO_PIN_4,GPIO_STRENGTH_2MA,GPIO_PIN_TYPE_STD);
000082  2308              MOVS     r3,#8
000084  2201              MOVS     r2,#1
000086  2130              MOVS     r1,#0x30
000088  4805              LDR      r0,|L1.160|
00008a  f7fffffe          BL       GPIOPadConfigSet
;;;58     
;;;59     }
00008e  bd10              POP      {r4,pc}
;;;60     
                          ENDP

                  |L1.144|
                          DCD      0x40025000
                  |L1.148|
                          DCD      0x40007000
                  |L1.152|
                          DCD      0x40006000
                  |L1.156|
                          DCD      0x40005000
                  |L1.160|
                          DCD      0x40024000

                          AREA ||i.GpioSetup2||, CODE, READONLY, ALIGN=2

                  GpioSetup2 PROC
;;;63     //different methods: libraries or direct register access
;;;64     void GpioSetup2()
000000  481e              LDR      r0,|L2.124|
;;;65     {
;;;66     	//setup port F
;;;67     
;;;68     	//need to unlock the pins first
;;;69     	GPIO_PORTF_LOCK_R = GPIO_LOCK_KEY;  //allow write access to CR reg
000002  491f              LDR      r1,|L2.128|
000004  6008              STR      r0,[r1,#0]
;;;70     	GPIO_PORTF_CR_R = 0xFF; 						//write CR reg
000006  20ff              MOVS     r0,#0xff
000008  1d09              ADDS     r1,r1,#4
00000a  6008              STR      r0,[r1,#0]
;;;71     	GPIO_PORTF_LOCK_R = 0;							//lock access to CR reg
00000c  2000              MOVS     r0,#0
00000e  1f09              SUBS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;72     
;;;73     	GPIO_PORTF_DIR_R = 0x0000000E; //PF1-3, outputs, all others inputs
000012  200e              MOVS     r0,#0xe
000014  491b              LDR      r1,|L2.132|
000016  6008              STR      r0,[r1,#0]
;;;74     	GPIO_PORTF_PUR_R = 0x00000011; //Pullups on PF0, PF4
000018  2011              MOVS     r0,#0x11
00001a  4919              LDR      r1,|L2.128|
00001c  3910              SUBS     r1,r1,#0x10
00001e  6008              STR      r0,[r1,#0]
;;;75     	
;;;76     	GPIO_PORTF_DEN_R = 0x0000001F; //PF0-4, digital enable, all others not
000020  201f              MOVS     r0,#0x1f
000022  4917              LDR      r1,|L2.128|
000024  1f09              SUBS     r1,r1,#4
000026  6008              STR      r0,[r1,#0]
;;;77     	//alternatively, set the digital enable while preserving the register contents
;;;78     	GPIO_PORTF_DEN_R = GPIO_PORTF_DEN_R | 0x0000001F; 
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f040001f          ORR      r0,r0,#0x1f
000030  6008              STR      r0,[r1,#0]
;;;79     	//short hand
;;;80     	GPIO_PORTF_DEN_R |= 0x0000001F; 
000032  4608              MOV      r0,r1
000034  6800              LDR      r0,[r0,#0]
000036  f040001f          ORR      r0,r0,#0x1f
00003a  6008              STR      r0,[r1,#0]
;;;81     	
;;;82     	//Setup port D
;;;83     
;;;84     	//need to unlock the pins first
;;;85     	GPIO_PORTD_LOCK_R = GPIO_LOCK_KEY;  //allow write access to CR reg
00003c  480f              LDR      r0,|L2.124|
00003e  4912              LDR      r1,|L2.136|
000040  6008              STR      r0,[r1,#0]
;;;86     	GPIO_PORTD_CR_R = 0xFF; 						//write CR reg
000042  20ff              MOVS     r0,#0xff
000044  1d09              ADDS     r1,r1,#4
000046  6008              STR      r0,[r1,#0]
;;;87     	GPIO_PORTD_LOCK_R = 0;							//lock access to CR reg
000048  2000              MOVS     r0,#0
00004a  1f09              SUBS     r1,r1,#4
00004c  6008              STR      r0,[r1,#0]
;;;88     
;;;89     	
;;;90     	//clearing bits
;;;91     	GPIO_PORTD_DIR_R &= ~0x000000C0; //Make sure PD6, PD7 are inputs
00004e  480f              LDR      r0,|L2.140|
000050  6800              LDR      r0,[r0,#0]
000052  f02000c0          BIC      r0,r0,#0xc0
000056  490d              LDR      r1,|L2.140|
000058  6008              STR      r0,[r1,#0]
;;;92     	//Setting  bits
;;;93     	GPIO_PORTD_PUR_R |=  0x000000C0; //PD6, PD7 pullups enabled
00005a  480b              LDR      r0,|L2.136|
00005c  3810              SUBS     r0,r0,#0x10
00005e  6800              LDR      r0,[r0,#0]
000060  f04000c0          ORR      r0,r0,#0xc0
000064  4908              LDR      r1,|L2.136|
000066  3910              SUBS     r1,r1,#0x10
000068  6008              STR      r0,[r1,#0]
;;;94     	GPIO_PORTD_DEN_R |=  0x000000C0; //enable digtial pins
00006a  4807              LDR      r0,|L2.136|
00006c  1f00              SUBS     r0,r0,#4
00006e  6800              LDR      r0,[r0,#0]
000070  f04000c0          ORR      r0,r0,#0xc0
000074  4904              LDR      r1,|L2.136|
000076  1f09              SUBS     r1,r1,#4
000078  6008              STR      r0,[r1,#0]
;;;95     
;;;96     }
00007a  4770              BX       lr
;;;97     
                          ENDP

                  |L2.124|
                          DCD      0x4c4f434b
                  |L2.128|
                          DCD      0x40025520
                  |L2.132|
                          DCD      0x40025400
                  |L2.136|
                          DCD      0x40007520
                  |L2.140|
                          DCD      0x40007400

                          AREA ||i.UpdateSwitches||, CODE, READONLY, ALIGN=2

                  UpdateSwitches PROC
;;;98     //call this routine periodically to update the pin values in the global struct
;;;99     void UpdateSwitches()
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    		uint32_t scratch;
;;;102    		//pullups on pins so logic is reversed. 
;;;103    	
;;;104    		scratch = GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4);
000002  2110              MOVS     r1,#0x10
000004  4820              LDR      r0,|L3.136|
000006  f7fffffe          BL       GPIOPinRead
00000a  4604              MOV      r4,r0
;;;105    		if (scratch != 0) MySwitches.SW1 = 0;
00000c  b11c              CBZ      r4,|L3.22|
00000e  2000              MOVS     r0,#0
000010  491e              LDR      r1,|L3.140|
000012  7008              STRB     r0,[r1,#0]
000014  e002              B        |L3.28|
                  |L3.22|
;;;106    		else MySwitches.SW1 = 1;
000016  2001              MOVS     r0,#1
000018  491c              LDR      r1,|L3.140|
00001a  7008              STRB     r0,[r1,#0]
                  |L3.28|
;;;107    		
;;;108    		scratch = GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0);
00001c  2101              MOVS     r1,#1
00001e  481a              LDR      r0,|L3.136|
000020  f7fffffe          BL       GPIOPinRead
000024  4604              MOV      r4,r0
;;;109    		if (scratch != 0) MySwitches.SW2 = 0;
000026  b11c              CBZ      r4,|L3.48|
000028  2000              MOVS     r0,#0
00002a  4918              LDR      r1,|L3.140|
00002c  7048              STRB     r0,[r1,#1]
00002e  e002              B        |L3.54|
                  |L3.48|
;;;110    		else MySwitches.SW2 = 1;
000030  2001              MOVS     r0,#1
000032  4916              LDR      r1,|L3.140|
000034  7048              STRB     r0,[r1,#1]
                  |L3.54|
;;;111    	
;;;112    		scratch = GPIOPinRead(GPIO_PORTD_BASE,GPIO_PIN_6);
000036  2140              MOVS     r1,#0x40
000038  4815              LDR      r0,|L3.144|
00003a  f7fffffe          BL       GPIOPinRead
00003e  4604              MOV      r4,r0
;;;113    		if (scratch != 0) MySwitches.SW3 = 0;
000040  b11c              CBZ      r4,|L3.74|
000042  2000              MOVS     r0,#0
000044  4911              LDR      r1,|L3.140|
000046  7088              STRB     r0,[r1,#2]
000048  e002              B        |L3.80|
                  |L3.74|
;;;114    		else MySwitches.SW3 = 1;
00004a  2001              MOVS     r0,#1
00004c  490f              LDR      r1,|L3.140|
00004e  7088              STRB     r0,[r1,#2]
                  |L3.80|
;;;115    	
;;;116    		scratch = GPIOPinRead(GPIO_PORTD_BASE,GPIO_PIN_7);
000050  2180              MOVS     r1,#0x80
000052  480f              LDR      r0,|L3.144|
000054  f7fffffe          BL       GPIOPinRead
000058  4604              MOV      r4,r0
;;;117    		if (scratch != 0) MySwitches.SW4 = 0;
00005a  b11c              CBZ      r4,|L3.100|
00005c  2000              MOVS     r0,#0
00005e  490b              LDR      r1,|L3.140|
000060  70c8              STRB     r0,[r1,#3]
000062  e002              B        |L3.106|
                  |L3.100|
;;;118    		else MySwitches.SW4 = 1;
000064  2001              MOVS     r0,#1
000066  4909              LDR      r1,|L3.140|
000068  70c8              STRB     r0,[r1,#3]
                  |L3.106|
;;;119    	
;;;120    		// cap sense is not inverse logic
;;;121    		scratch = GPIOPinRead(GPIO_PORTC_BASE,GPIO_PIN_7);
00006a  2180              MOVS     r1,#0x80
00006c  4809              LDR      r0,|L3.148|
00006e  f7fffffe          BL       GPIOPinRead
000072  4604              MOV      r4,r0
;;;122    		if (scratch != 0) MySwitches.SW5 = 1;
000074  b11c              CBZ      r4,|L3.126|
000076  2001              MOVS     r0,#1
000078  4904              LDR      r1,|L3.140|
00007a  7108              STRB     r0,[r1,#4]
00007c  e002              B        |L3.132|
                  |L3.126|
;;;123    		else MySwitches.SW5 = 0;
00007e  2000              MOVS     r0,#0
000080  4902              LDR      r1,|L3.140|
000082  7108              STRB     r0,[r1,#4]
                  |L3.132|
;;;124    		
;;;125    	
;;;126    }
000084  bd10              POP      {r4,pc}
                          ENDP

000086  0000              DCW      0x0000
                  |L3.136|
                          DCD      0x40025000
                  |L3.140|
                          DCD      MySwitches
                  |L3.144|
                          DCD      0x40007000
                  |L3.148|
                          DCD      0x40006000

                          AREA ||.data||, DATA, ALIGN=0

                  MySwitches
                          DCDU     0x00000000
000004  00                DCB      0x00
