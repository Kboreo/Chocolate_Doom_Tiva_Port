; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\rvmdk\hal_pll.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\hal_pll.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\.. -I.\driverlib -I.\src -I.\inc -I.\RTE\_project -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DTM4C123GH6PM -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RB1 --omf_browse=.\rvmdk\hal_pll.crf src\HAL_PLL.c]
                          THUMB

                          AREA ||i.SetupPLL||, CODE, READONLY, ALIGN=2

                  SetupPLL PROC
;;;19     
;;;20     void SetupPLL(void)
000000  b510              PUSH     {r4,lr}
;;;21     {
;;;22     	//Using library
;;;23     	SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_OSC_MAIN|SYSCTL_XTAL_16MHZ);
000002  4802              LDR      r0,|L1.12|
000004  f7fffffe          BL       SysCtlClockSet
;;;24     	
;;;25     	
;;;26     	
;;;27     	//The two examples below use direct register access, not setup for 80Mhz.
;;;28     	//pg 113 in book
;;;29     	//Using Direct Register Access and Bits
;;;30     //	SYSCTL_RCC2_R |= 0x80000000;  	 
;;;31     //	SYSCTL_RCC2_R |= 0x00000800;		 
;;;32     //	SYSCTL_RCC_R  |= (SYSCTL_RCC_R &~0x000007C0)+0x00000540;
;;;33     //	SYSCTL_RCC2_R &= ~0x00000070;
;;;34     //	SYSCTL_RCC2_R &= ~0x00002000;
;;;35     //	SYSCTL_RCC2_R |=  0x40000000;
;;;36     //	SYSCTL_RCC_R  |= (SYSCTL_RCC2_R &~0x1FC00000)+(4<<22);
;;;37     //	while((SYSCTL_RIS_R&0x00000040)==0){};
;;;38     //	SYSCTL_RCC2_R &= ~0x00000800;
;;;39     		
;;;40     //	//Using Direct Register Access
;;;41     //	  // 1) bypass PLL and system clock divider while initializing
;;;42     //  SYSCTL_RCC_R |= SYSCTL_RCC_BYPASS;
;;;43     //  SYSCTL_RCC_R &= ~SYSCTL_RCC_USESYSDIV;
;;;44     //  // 2) select the crystal value and oscillator source
;;;45     //  SYSCTL_RCC_R &= ~SYSCTL_RCC_XTAL_M;   	// clear XTAL field
;;;46     //  SYSCTL_RCC_R += SYSCTL_RCC_XTAL_6MHZ; 	// configure for 6 MHz crystal (default setting)
;;;47     //  SYSCTL_RCC_R &= ~SYSCTL_RCC_OSCSRC_M; 	// clear oscillator source field
;;;48     //  SYSCTL_RCC_R += SYSCTL_RCC_OSCSRC_MAIN;	// configure for main oscillator source (default setting)
;;;49     //  // 3) activate PLL by clearing PWRDN and OEN
;;;50     //  SYSCTL_RCC_R &= ~(SYSCTL_RCC_PWRDN|SYSCTL_RCC_OEN);
;;;51     //  // 4) set the desired system divider and the USESYSDIV bit
;;;52     //  SYSCTL_RCC_R &= ~SYSCTL_RCC_SYSDIV_M; // system clock divider field
;;;53     //  SYSCTL_RCC_R += SYSCTL_RCC_SYSDIV_8;  // configure for 25 MHz clock
;;;54     //  SYSCTL_RCC_R |= SYSCTL_RCC_USESYSDIV;
;;;55     //  // 5) wait for the PLL to lock by polling PLLLRIS
;;;56     //  while((SYSCTL_RIS_R&SYSCTL_RIS_PLLLRIS)==0){};
;;;57     //  // 6) enable use of PLL by clearing BYPASS
;;;58     //  SYSCTL_RCC_R &= ~SYSCTL_RCC_BYPASS;
;;;59     //	
;;;60     }
000008  bd10              POP      {r4,pc}
;;;61     
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0xc1000540
